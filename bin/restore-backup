#!/usr/bin/env bash

# Download today's sanitized backup of the publish database to the Downloads directory
# Drop and recreate the development and test databases
# Restore the development database with today's sanitized backup.

set -euo pipefail

log() {
  echo "$(date +'%Y-%m-%d %H:%M:%S') - $1"
}

usage() {
  cat <<EOF
Usage: $0 [--no-download] [--help]

Options:
  --no-download   Skip downloading and decompressing the backup file.
  --help          Show this help message.
EOF
  exit 1
}

NO_DOWNLOAD=0

while [[ $# -gt 0 ]]; do
  case "$1" in
    --no-download)
      NO_DOWNLOAD=1
      ;;
    --help|-h)
      usage
      ;;
    *)
      log "Unknown argument: $1"
      usage
      ;;
  esac
  shift
done

readonly BACKUP_DATE="$(date +%Y-%m-%d)"
readonly BACKUP_BLOB="publish_sanitised_${BACKUP_DATE}.sql.gz"
readonly BACKUP_FILE="${HOME}/Downloads/sanitised_backup.sql.gz"
readonly SQL_FILE="${HOME}/Downloads/sanitised_backup.sql"
readonly STORAGE_ACCOUNT="s189p01pttdbbkpsanpdsa"
readonly CONTAINER="database-backup"
readonly RESOURCE_GROUP="s189p01-ptt-pd-rg"
readonly DEV_DB="manage_courses_backend_development"
readonly TEST_DB="manage_courses_backend_test"

download_backup() {
  log "Starting backup download..."
  az storage blob download \
    --account-name "${STORAGE_ACCOUNT}" \
    --container-name "${CONTAINER}" \
    --name "${BACKUP_BLOB}" \
    --file "${BACKUP_FILE}" \
    --connection-string "$(az storage account show-connection-string -g "${RESOURCE_GROUP}" -n "${STORAGE_ACCOUNT}" --query 'connectionString' -o tsv)"
  log "Backup download completed."
}

decompress_backup() {
  log "Checking if backup file exists..."
  if [[ -e "${BACKUP_FILE}" ]]; then
    log "Decompressing backup file..."
    gunzip -fd "${BACKUP_FILE}"
    log "Backup file decompressed."
  else
    log "Backup file not found: ${BACKUP_FILE}"
    exit 1
  fi
}

drop_and_recreate_db() {
  log "Dropping and recreating development database..."
  RAILS_ENV=development DISABLE_DATABASE_ENVIRONMENT_CHECK=1 bin/rails db:drop db:create
  log "Development database recreated."
}

restore_db() {
  log "Restoring development database..."
  if command -v pv > /dev/null; then
    pv "${SQL_FILE}" | psql "${DEV_DB}" > /dev/null 2>&1
  else
    psql "${DEV_DB}" < "${SQL_FILE}"
  fi
  psql "${DEV_DB}" -c 'CREATE EXTENSION IF NOT EXISTS postgis;' > /dev/null 2>&1
  psql "${TEST_DB}" -c 'CREATE EXTENSION IF NOT EXISTS postgis;' > /dev/null 2>&1
  log "Development database restored."
}

main() {
  if [[ "${NO_DOWNLOAD}" -eq 0 ]]; then
    download_backup
    decompress_backup
  else
    log "--no-download flag set, skipping download and decompression."
    if [[ ! -e "${SQL_FILE}" ]]; then
      log "SQL file not found: ${SQL_FILE}. Cannot continue."
      exit 1
    fi
  fi

  drop_and_recreate_db
  restore_db
}

main "$@"
