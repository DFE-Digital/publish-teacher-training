name: restore
description: Restore AKS environment database

inputs:
  azure-credentials:
    required: true
  environment:
    description: Environment to restore to
    required: true
    type: choice
    options:
      - review_aks
      - qa_aks
      - staging_aks
  pr-number:
    description: PR number for the review app
    required: false

runs:
  using: composite
  steps:
    - name: Set environment variables for AKS
      shell: bash
      run: |
        tf_vars_file=terraform/aks/workspace_variables/${{ inputs.environment }}.tfvars.json
        echo "cluster=$(jq -r '.cluster' ${tf_vars_file})" >> $GITHUB_ENV
        echo "app_environment=$(jq -r '.app_environment' ${tf_vars_file})" >> $GITHUB_ENV

    - uses: azure/login@v2
      with:
        creds: ${{ inputs.azure-credentials }}

    - name: Set app name variable
      shell: bash
      run: |
        if [ "${{ env.app_environment }}" == "review" ] && [ "${{ inputs.pr-number }}" != "" ]; then
          echo "Set the app name to include the review app PR number."
          echo "app_name=publish-review-${{ inputs.pr-number }}" >> $GITHUB_ENV
        else
          echo "Set the app name to the environent name"
          echo "app_name=publish-${{ env.app_environment }}" >> $GITHUB_ENV
        fi

    - name: Install kubectl
      if: ${{ env.app_environment != 'review' }}
      uses: DFE-Digital/github-actions/set-kubectl@master

    - uses: DFE-Digital/github-actions/set-kubelogin-environment@master
      with:
        azure-credentials: ${{ inputs.azure-credentials }}

    - name: K8 setup
      if: ${{ env.app_environment != 'review' }}
      shell: bash
      run: |
        make ci ${{ inputs.environment }} get-cluster-credentials
        make install-konduit

    - name: Download Sanitised Backup
      if: ${{ env.app_environment != 'review' }}
      uses: actions/download-artifact@v4
      with:
        name: backup_sanitised

    - name: Download Latest Sanitised Backup
      if: ${{ env.app_environment == 'review' }}
      shell: bash
      run: |
        sanitised_backup_workflow_run_id=$(gh run list -w "Database Backup and Restore" -s success --json databaseId --jq '.[].databaseId' -L 1)
        echo "Download artifact for Database Backup and Restore workflow run ID: $sanitised_backup_workflow_run_id"
        gh run download $sanitised_backup_workflow_run_id
        mv backup_sanitised/backup_sanitised.sql ./

    - name: Restore backup to aks env database
      shell: bash
      run: |
        bin/konduit.sh -i backup_sanitised.sql -t 7200 ${{ env.app_name }} -- psql
