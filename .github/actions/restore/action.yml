name: restore_v2
description: Restore AKS environment database

inputs:
  azure-credentials:
    required: true
  environment:
    description: Environment to restore to
    required: true
    type: choice
    options:
    - review_aks
    - qa_aks
  pr-number:
    description: PR number for the review app
    required: false

runs:
  using: composite
  steps:
    - name: Set KV environment variables for AKS
      shell: bash
      run: |
        tf_vars_file=terraform/aks/workspace_variables/${{ inputs.environment }}.tfvars.json
        echo "cluster=$(jq -r '.cluster' ${tf_vars_file})" >> $GITHUB_ENV
        echo "app_environment=$(jq -r '.app_environment' ${tf_vars_file})" >> $GITHUB_ENV

    - uses: azure/login@v1
      with:
        creds: ${{ inputs.azure-credentials }}

    - name: Set cluster env vars
      shell: bash
      run: |
       case ${{ env.cluster }} in
          test)
            echo "cluster_rg=s189t01-tsc-ts-rg" >> $GITHUB_ENV
            echo "cluster_name=s189t01-tsc-test-aks" >> $GITHUB_ENV
            ;;
          production)
            echo "cluster_rg=s189p01-tsc-pd-rg" >> $GITHUB_ENV
            echo "cluster_name=s189p01-tsc-production-aks" >> $GITHUB_ENV
            ;;
          *)
            echo "unknown cluster"
            ;;
        esac

    - name: Set app name variable
      shell: bash
      run: |
        modified_environment=$(echo "${{ inputs.environment }}" | sed 's/_aks//g')
        echo "modified_environment: ${modified_environment}"

        if [ "${{ inputs.environment }}" == "review_aks" ] && [ "${{ inputs.pr-number }}" != "" ]; then
          echo "Set the app name to include the review app PR number."
          app_name_suffix=${modified_environment}-${{ inputs.pr-number }}
          echo "app_name=publish-${app_name_suffix}" >> $GITHUB_ENV
        else
          echo "Set the app name to the environent name"
          echo "app_name=publish-${modified_environment}" >> $GITHUB_ENV
        fi

    - name: Install kubectl
      if: ${{ inputs.environment != 'review_aks' }}
      uses: azure/setup-kubectl@v3
      with:
        version: "v1.26.1" # default is latest stable

    - name: K8 setup
      if: ${{ inputs.environment != 'review_aks' }}
      shell: bash
      run: |
        az aks get-credentials -g ${{ env.cluster_rg }} -n ${{ env.cluster_name }}
        make install-konduit

    - name: Download Latest Sanitised Backup
      shell: bash
      run: |
        sanitised_backup_workflow_run_id=$(gh run list -w "Database Backup and Restore" -s completed --json databaseId --jq '.[].databaseId' -L 1)
        echo "Download artifact for workflow run ID: $sanitised_backup_workflow_run_id"
        gh run download $sanitised_backup_workflow_run_id

    - name: Restore backup to aks env database
      shell: bash
      run: |
        bin/konduit.sh -i backup_sanitised/backup_sanitised.sql -t 7200 ${{ env.app_name }} -- psql

    - name: Remove PaaS specific event triggers
      shell: bash
      run: |
        bin/konduit.sh ${{ env.app_name }} -- psql -c 'drop event trigger forbid_ddl_reader'
        bin/konduit.sh ${{ env.app_name }} -- psql -c 'drop event trigger make_readable'
        bin/konduit.sh ${{ env.app_name }} -- psql -c 'drop event trigger reassign_owned'
