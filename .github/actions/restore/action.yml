name: restore
description: Restore AKS environment database

inputs:
  azure-storage-connection-string:
    required: true
  environment:
    description: Environment to restore to
    required: true
    type: choice
    options:
      - review
      - qa
      - staging
  pr-number:
    description: PR number for the review app
    required: false
  azure-client-id:
    description: Managed identity client ID
    required: true
  azure-subscription-id:
    description: Azure subscription ID
    required: true
  azure-tenant-id:
    description: Azure tenant ID
    required: true

runs:
  using: composite
  steps:
    - name: Set env variable
      shell: bash
      run: echo "SANITISED_FILE_NAME=publish_sanitised_$(date +"%F")" >> $GITHUB_ENV

    - name: Download Backup
      shell: bash
      run: |
        az storage blob download --container-name database-backup \
        --file ${SANITISED_FILE_NAME}.sql.gz --name ${SANITISED_FILE_NAME}.sql.gz \
        --connection-string '${{ inputs.azure-storage-connection-string }}'

    - name: Set environment variables for AKS
      shell: bash
      run: |
        tf_vars_file=terraform/aks/workspace_variables/${{ inputs.environment }}.tfvars.json
        echo "cluster=$(jq -r '.cluster' ${tf_vars_file})" >> $GITHUB_ENV
        echo "app_environment=$(jq -r '.app_environment' ${tf_vars_file})" >> $GITHUB_ENV
        echo "NAMESPACE=$(jq -r '.namespace' ${tf_vars_file})" >> $GITHUB_ENV

    - name: Set app name variable
      shell: bash
      run: |
        if [ "${{ env.app_environment }}" == "review" ] && [ "${{ inputs.pr-number }}" != "" ]; then
          echo "Set the app name to include the review app PR number."
          echo "app_name=publish-review-${{ inputs.pr-number }}" >> $GITHUB_ENV
        else
          echo "Set the app name to the environent name"
          echo "app_name=publish-${{ env.app_environment }}" >> $GITHUB_ENV
        fi

    - uses: azure/login@v2
      with:
        tenant-id: ${{ inputs.azure-tenant-id }}
        subscription-id: ${{ inputs.azure-subscription-id }}
        client-id: ${{ inputs.azure-client-id }}

    - name: Install kubectl
      if: ${{ env.app_environment != 'review' }}
      uses: DFE-Digital/github-actions/set-kubectl@master

    - uses: DFE-Digital/github-actions/set-kubelogin-environment@master
      with:
        azure-tenant-id: ${{ inputs.azure-tenant-id }}
        azure-subscription-id: ${{ inputs.azure-subscription-id }}
        azure-client-id: ${{ inputs.azure-client-id }}

    - name: K8 setup
      if: ${{ env.app_environment != 'review' }}
      shell: bash
      run: |
        make ci ${{ inputs.environment }} get-cluster-credentials
        make install-konduit

    - name: Restore backup to aks env database
      shell: bash
      run: |
        bin/konduit.sh -n ${NAMESPACE} -i ${SANITISED_FILE_NAME}.sql.gz -c -t 7200 ${{ env.app_name }} -- psql
