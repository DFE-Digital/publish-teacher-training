name: Build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
    types: [opened, reopened, synchronize, labeled]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: dfedigital/teacher-training-api

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - run: echo "test"

    - name: Get values for current commit (Push)
      if: github.event_name == 'push'
      run: |
        GIT_REF=${{github.ref}}
        GIT_BRANCH=${GIT_REF##*/}
        echo "BRANCH_TAG=$GIT_BRANCH" >> $GITHUB_ENV
        echo "DOCKER_IMAGE_TAG=$GITHUB_SHA" >> $GITHUB_ENV

    - name: Get values for current commit (Pull request)
      if: github.event_name == 'pull_request'
      run: |
        # This is the actual PR branch
        GIT_REF=${{ github.head_ref }}
        GIT_BRANCH=${GIT_REF##*/}
        echo "BRANCH_TAG=$GIT_BRANCH" >> $GITHUB_ENV
        # This is the latest commit on the actual PR branch
        echo "DOCKER_IMAGE_TAG=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV

    - name: Login to DockerHub
      if: github.actor != 'dependabot[bot]'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PERSONAL_ACCESS_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build Teacher-Training-Api-Middleman
      uses: docker/build-push-action@v2
      with:
        tags: ${{ env.DOCKER_IMAGE}}-middleman:${{ env.BRANCH_TAG }}
        push: ${{ github.actor != 'dependabot[bot]' }}
        load: ${{ github.actor == 'dependabot[bot]' }}
        target: middleman
        cache-from: |
          ${{ env.DOCKER_IMAGE}}-middleman:master
          ${{ env.DOCKER_IMAGE}}-middleman:${{ env.BRANCH_TAG }}
        build-args: BUILDKIT_INLINE_CACHE=1

    - name: Build Teacher-Training-Api
      uses: docker/build-push-action@v2
      with:
        tags: |
          ${{ env.DOCKER_IMAGE}}:${{ env.BRANCH_TAG }}
          ${{ env.DOCKER_IMAGE}}:${{ env.DOCKER_IMAGE_TAG }}
        push: ${{ github.actor != 'dependabot[bot]' }}
        load: ${{ github.actor == 'dependabot[bot]' }}
        cache-from: |
          ${{ env.DOCKER_IMAGE}}:master
          ${{ env.DOCKER_IMAGE}}:${{ env.BRANCH_TAG }}
          ${{ env.DOCKER_IMAGE}}-middleman:master
          ${{ env.DOCKER_IMAGE}}-middleman:${{ env.BRANCH_TAG }}
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          COMMIT_SHA=${{ env.DOCKER_IMAGE_TAG }}

    - name: Trigger Review App Deployment
      if: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy') }}
      uses: benc-uk/workflow-dispatch@v1
      with:
        workflow: Deploy
        ref: ${{ github.head_ref }}
        token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN  }}
        inputs: '{"pr": "${{ github.event.pull_request.number }}", "sha": "${{ env.DOCKER_IMAGE_TAG }}"}'

    - name: Pull image if not loaded
      if: ${{ github.actor != 'dependabot[bot]' }}
      run: |
        docker pull ${DOCKER_IMAGE}:${{ env.DOCKER_IMAGE_TAG }}

    - name: Setup tests
      run: |
        docker-compose up --no-build -d
        docker-compose exec -T web /bin/sh -c "./wait-for-command.sh -c 'nc -z db 5432' -s 0 -t 20"
        docker-compose exec -T web /bin/sh -c "bundle exec rails db:setup"
        docker-compose exec -T web /bin/sh -c "apk --no-cache add curl"
        docker-compose exec -T web /bin/sh -c "bundle exec rake cc:setup"
      env:
        IMAGE_TAG: ${{ env.DOCKER_IMAGE_TAG }}

    - name: Run Ruby Linter
      run: docker-compose exec -T web /bin/sh -c 'bundle exec rubocop --format clang'

    - name: Run tests
      run: |
        docker-compose exec -T web /bin/sh -c 'bundle config --local disable_exec_load true'
        docker-compose exec -T web /bin/sh -c 'bundle exec rake parallel:setup'
        docker-compose exec -T web /bin/sh -c 'bundle exec rake "parallel:spec[,, -O .azure_parallel]"'
      env:
        IMAGE_TAG: ${{ env.DOCKER_IMAGE_TAG }}
        CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}

    - name: Wait for review app deployment
      id: wait_for_review_app_deployment
      if: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy') }}
      uses: fountainhead/action-wait-for-check@v1.0.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: ${{ github.head_ref }}
        checkName: ${{ github.event.pull_request.number }} Deployment
        timeoutSeconds:  1800
        intervalSeconds: 10

    - name: Exit if review app deployment failed
      if: ${{ steps.wait_for_review_app_deployment.outputs.conclusion != '' && steps.wait_for_review_app_deployment.outputs.conclusion != 'success' }}
      run: exit 1

    - name: Trigger Deployment
      if: ${{ success() && github.ref == 'refs/heads/master' }}
      uses: benc-uk/workflow-dispatch@v1
      with:
        workflow: Deploy
        token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN  }}
        inputs: '{"qa": "true", "staging": "true", "production": "true", "sandbox": "true", "sha": "${{ env.DOCKER_IMAGE_TAG }}"}'

    - name: Alert Build Failures
      if: ${{ failure() && github.ref == 'refs/heads/master' }}
      uses: rtCamp/action-slack-notify@master
      env:
        SLACK_CHANNEL: twd_bat_devops
        SLACK_COLOR: '#ef5343'
        SLACK_ICON_EMOJI: ':github-logo:'
        SLACK_USERNAME: Teacher Training API
        SLACK_TITLE: Build failure
        SLACK_MESSAGE: ':alert: <!channel> Teacher Training API Build failure :sadparrot:'
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
