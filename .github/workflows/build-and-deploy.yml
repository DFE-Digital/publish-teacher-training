name: Build and Deploy
concurrency: build_and_deploy_${{ github.ref_name }}

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, reopened, synchronize, labeled]

permissions:
  contents: write
  deployments: write
  packages: write
  pull-requests: write
  id-token: write

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    # Run if:
    # - It's main branch
    # - It is a PR, don't run if it has a prototype label
    # - It is a PR, don't run on opened if it has a deploy label
    if: |
        github.ref == 'refs/heads/main' ||
        (
          github.event_name == 'pull_request' &&
          !contains(github.event.pull_request.labels.*.name, 'prototype') &&
          (
            github.event.action != 'opened' ||
            !contains(github.event.pull_request.labels.*.name, 'deploy')
          )
        )
    strategy:
      fail-fast: false
      matrix:
        tests:
          - name: rubocop
            command: bundle exec rubocop --format github
          - name: erb_lint
            command: bundle exec erb_lint app
          - name: JS standard
            command: yarn run standard $(git ls-files '**.js' | tr '\n' ' ')
          - name: Stylelint
            command: yarn run stylelint

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - uses: actions/setup-node@v4
        with:
          cache: yarn
      - run: yarn install --frozen-lockfile

      - name: ${{ matrix.tests.name }}
        run: ${{ env.COMMAND }}
        env:
          COMMAND: ${{ matrix.tests.command }}

      - name: Notify Slack channel on job failure
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_USERNAME: Publish Teacher Training CI
          SLACK_TITLE: Lint failure
          SLACK_MESSAGE: ":alert: <!channel> Publish Teacher Training ${{ matrix.tests.name }} lint failure on branch ${{ needs.build.outputs.GIT_BRANCH }} :sadparrot:"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: failure
          SLACK_FOOTER: Sent from lint job in build workflow

  javascript-tests:
    name: JavaScript Tests
    needs: [lint]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          cache: yarn
      - run: yarn install --frozen-lockfile

      - name: yarn test
        run: yarn run test --run

      - name: Notify Slack channel on job failure
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_USERNAME: Publish Teacher Training CI
          SLACK_TITLE: Lint failure
          SLACK_MESSAGE: ":alert: <!channel> Publish Teacher Training ${{ matrix.name }} lint failure on branch ${{ needs.build.outputs.GIT_BRANCH }} :sadparrot:"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: failure
          SLACK_FOOTER: Sent from lint job in build workflow

  analytics-checks:
    name: Analytics checks
    needs: [lint]
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: postgres://postgres:developmentpassword@localhost:5432

    services:
      postgres:
        image: postgis/postgis:14-3.2-alpine
        env:
          POSTGRES_PASSWORD: developmentpassword
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Setup database
        run: bundle exec rails db:prepare

      - name: Run tests
        run: bundle exec rails dfe:analytics:check

  rails-tests:
    name: Rails Tests
    needs: [lint]
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: postgres://postgres:developmentpassword@localhost:5432

    services:
      postgres:
        image: postgis/postgis:14-3.2-alpine
        env:
          POSTGRES_PASSWORD: developmentpassword
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      fail-fast: false
      matrix:
        tests:
          - name: Unit - Models
            include-pattern: spec/models/.*_spec.rb
          - name: Unit - Services
            include-pattern: spec/services/.*_spec.rb
          - name: Unit - Forms
            include-pattern: spec/forms/.*_spec.rb
          - name: Unit - Components
            include-pattern: spec/components/.*_spec.rb
          - name: Unit - Other
            include-pattern: spec/.*_spec.rb
            exclude-pattern: spec/(system|features|smoke|models|services|forms|components)/.*_spec.rb

          - name: Integration - Auth
            include-pattern: spec/features/auth/.*_spec.rb
          - name: Integration - Find
            include-pattern: spec/features/find/.*_spec.rb
          - name: Integration - Publish
            include-pattern: spec/features/publish/.*_spec.rb
          - name: Integration - Support
            include-pattern: spec/features/support/.*_spec.rb
          - name: Integration - Other
            include-pattern: spec/features/.*_spec.rb
            exclude-pattern: spec/features/(auth|find|publish|support)/.*_spec.rb


          - name: System - Find
            include-pattern: spec/system/find/.*_spec.rb
          - name: System - Other
            include-pattern: spec/system/.*_spec.rb
            exclude-pattern: spec/system/find/.*_spec.rb
        # Pass Settings compatible env vars to runs tests with
        # feature flag(s) enables
        # Separate mutliple flags with a space
        feature-flags: [""]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - uses: actions/setup-node@v4
        with:
          cache: yarn
      - run: yarn install --frozen-lockfile

      - run: bundle exec rails parallel:setup
      - run: bundle exec rails spec:prepare

      - name: ${{ matrix.tests.name }} tests with feature flags
        run: |
          ${{ env.FEATURE_FLAGS }} bundle exec --verbose parallel_rspec --pattern "${{ env.INCLUDE_PATTERN }}" --exclude-pattern "${{ env.EXCLUDE_PATTERN }}"
        env:
          INCLUDE_PATTERN: ${{ matrix.tests.include-pattern }}
          EXCLUDE_PATTERN: ${{ matrix.tests.exclude-pattern || ' ' }}
          FEATURE_FLAGS: ${{ matrix.feature-flags }}

      - name: Upload screenshots
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: Test-screenshots
          path: ${{ github.workspace }}/tmp/capybara/*

      # - name: Upload coverage results
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: Coverage_report
      #     path: ${{ github.workspace }}/out/*

      - name: Alert Test Failures
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_COLOR: "#ef5343"
          SLACK_ICON_EMOJI: ":github-logo:"
          SLACK_USERNAME: Publish Teacher Training CI
          SLACK_TITLE: Test failure
          SLACK_MESSAGE: ":alert: <!channel> Publish Teacher Training Test failure :sadparrot:"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  build:
    name: Build
    needs: [lint, analytics-checks, javascript-tests, rails-tests]
    if: ${{ github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy')) }}
    outputs:
      docker_image: ${{ env.DOCKER_IMAGE }}
      IMAGE_TAG: ${{ steps.build-image.outputs.tag }}
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: ghcr.io/dfe-digital/publish-teacher-training
      MIDDLEMAN_IMAGE: ghcr.io/dfe-digital/publish-teacher-training-middleman

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build middleman Docker Image
        id: build-image-middleman
        uses: DFE-Digital/github-actions/build-docker-image@build-docker-image-override-tags
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          context: ""
          reuse-cache: true
          max-cache: false
          target: middleman
          docker-repository: ${{ env.MIDDLEMAN_IMAGE }}
          slack-webhook: ${{ secrets.SLACK_WEBHOOK }}
#          snyk-token: ${{ secrets.SNYK_TOKEN }}

      - name: Build Docker Image
        id: build-image
        uses: DFE-Digital/github-actions/build-docker-image@build-docker-image-override-tags
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          context: ""
          reuse-cache: true
          max-cache: false
          docker-repository: ${{ env.DOCKER_IMAGE }}
          extra-cache-repo: ${{ env.MIDDLEMAN_IMAGE }}
          snyk-token: ${{ secrets.SNYK_TOKEN }}
          slack-webhook: ${{ secrets.SLACK_WEBHOOK }}

  deploy-review-app:
    name: Deployment To Review
    environment:
      name: review
    concurrency: deploy_review_${{ github.event.pull_request.number }}
    needs: [build]
    if: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy') }}
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy App to Review
        id: deploy_review
        uses: ./.github/actions/deploy/
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          environment: review
          pr-number: ${{ github.event.pull_request.number }}
          sha: ${{ needs.build.outputs.image_tag }}
          slack-webhook: ${{ secrets.SLACK_WEBHOOK }}
          azure-storage-connection-string: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING_SANITISED }}

      - name: Post comment to Pull Request ${{ github.event.number }}
        if: ${{ github.event_name == 'pull_request' }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: aks
          message: |
            ### Deployments

            | App               | URL                                                                                      |
            | ----------------- | ---------------------------------------------------------------------------------------- |
            | Publish           | <https://publish-review-${{ github.event.number }}.test.teacherservices.cloud>           |
            | Find              | <https://find-review-${{ github.event.number }}.test.teacherservices.cloud>              |
            | API               | <https://publish-review-${{ github.event.number }}-api.test.teacherservices.cloud>       |

  deploy-aks-before-production:
    name: Parallel deployment before production
    environment:
      name: ${{ matrix.environment }}
      url: ${{ steps.deploy_app_before_production.outputs.deploy-url }}
    if: ${{ success() && github.ref == 'refs/heads/main' }}
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        environment: [qa, staging]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy App to ${{ matrix.environment }}
        id: deploy_app_before_production
        uses: ./.github/actions/deploy/
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          environment: ${{ matrix.environment }}
          sha: ${{ github.sha }}
          slack-webhook: ${{ secrets.SLACK_WEBHOOK }}

  deploy-aks-production:
    name: Production deployment
    environment:
      name: production
      url: ${{ steps.deploy_app.outputs.deploy-url }}
    if: ${{ success() && github.ref == 'refs/heads/main' }}
    needs: [deploy-aks-before-production]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy App to production
        id: deploy_app
        uses: ./.github/actions/deploy/
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          environment: production
          sha: ${{ github.sha }}
          slack-webhook: ${{ secrets.SLACK_WEBHOOK }}

  deploy-aks-sandbox:
    name: Sandbox deployment
    environment:
      name: sandbox
      url: ${{ steps.deploy_sandbox.outputs.deploy-url }}
    if: ${{ success() && github.ref == 'refs/heads/main' }}
    needs: [deploy-aks-production]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy App to sandbox
        id: deploy_sandbox
        uses: ./.github/actions/deploy/
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          environment: sandbox
          sha: ${{ github.sha }}
          slack-webhook: ${{ secrets.SLACK_WEBHOOK }}

  deploy_domains_infra:
    name: Deploy Domains Infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    concurrency: deploy_domains_infra
    needs: [deploy-aks-sandbox]
    environment:
      name: production
    permissions:
      id-token: write

    steps:
      - name: Deploy Domains Infrastructure
        uses: DFE-Digital/github-actions/deploy-domains-infra@master
        with:
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID  }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID   }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID   }}
          slack-webhook: ${{ secrets.SLACK_WEBHOOK }}
          terraform-base: terraform/custom_domains/infrastructure

  # deploy_domains_env:
  #   name: Deploy Domains to ${{ matrix.domain_environment }} environment
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   concurrency: deploy_${{ matrix.domain_environment }}
  #   needs: [deploy_domains_infra]
  #   strategy:
  #     max-parallel: 1
  #     matrix:
  #       domain_environment: [qa, staging, sandbox, production]
  #   environment:
  #     name: production
  #   permissions:
  #     id-token: write

  #   steps:
  #     - name: Deploy Domains Environment
  #       uses: DFE-Digital/github-actions/deploy-domains-env@master
  #       with:
  #         azure-client-id: ${{ secrets.AZURE_CLIENT_ID  }}
  #         azure-tenant-id: ${{ secrets.AZURE_TENANT_ID   }}
  #         azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID   }}
  #         environment: ${{ matrix.domain_environment }}
  #         healthcheck: healthcheck
  #         slack-webhook: ${{ secrets.SLACK_WEBHOOK }}
  #         terraform-base: terraform/custom_domains/environment_domains
